import pandas as pd
import tkinter as tk
from tkinter import filedialog, messagebox
from functools import partial

class DataMergerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Feed and PSV File Merger")
        
        # Initialize file paths
        self.feed_files = ["", "", ""]
        self.psv_file = ""
        
        # UI Elements
        tk.Label(root, text="Select Feed Files and PSV File").grid(row=0, column=0, columnspan=2, pady=10)
        
        # Feed file selection buttons and labels
        for i in range(3):
            tk.Button(root, text=f"Select Feed File {i + 1}", command=partial(self.select_feed_file, i)).grid(row=i + 1, column=0, padx=5, pady=5)
            label = tk.Label(root, text="No file selected")
            label.grid(row=i + 1, column=1, padx=5)
            setattr(self, f"feed_label_{i}", label)  # Dynamically store each label as an attribute for easy updating
        
        # PSV file selection button and label
        tk.Button(root, text="Select PSV File", command=self.select_psv_file).grid(row=4, column=0, padx=5, pady=5)
        self.psv_label = tk.Label(root, text="No file selected")
        self.psv_label.grid(row=4, column=1, padx=5)
        
        # Merge button
        tk.Button(root, text="Merge Files", command=self.merge_files).grid(row=5, column=0, columnspan=2, pady=20)
        
        # Output label
        self.output_label = tk.Label(root, text="")
        self.output_label.grid(row=6, column=0, columnspan=2, pady=10)

    def select_feed_file(self, index):
        file_path = filedialog.askopenfilename(filetypes=[("CSV Files", "*.csv")])
        if file_path:
            self.feed_files[index] = file_path
            # Update the corresponding feed file label
            getattr(self, f"feed_label_{index}").config(text=file_path.split("/")[-1])

    def select_psv_file(self):
        file_path = filedialog.askopenfilename(filetypes=[("PSV Files", "*.psv")])
        if file_path:
            self.psv_file = file_path
            # Update the PSV file label
            self.psv_label.config(text=file_path.split("/")[-1])

    def update_label(self, text):
        self.output_label.config(text=text)

    def merge_files(self):
        if "" in self.feed_files or not self.psv_file:
            messagebox.showwarning("Missing Files", "Please select all three feed files and the PSV file.")
            return
        
        try:
            # Load the PSV file with selected columns only, specifying a pipe delimiter
            psv_data = pd.read_csv(self.psv_file, sep="|", usecols=[0, 2, 5, 9, 21, 24, 25], encoding="ISO-8859-1")
            
            # Standardize column names for the PSV file for easy reference
            psv_data.columns = ["col_0", "col_2", "col_5", "col_9", "col_21", "col_24", "col_25"]
            
            # Clean the matching column in the PSV file to remove leading/trailing spaces and normalize case
            psv_data["col_9"] = psv_data["col_9"].astype(str).str.strip().str.lower()
            
            # Initialize an empty list to store merged chunks
            merged_data = []

            # Process each feed file in chunks of 1000 rows
            for feed_file in self.feed_files:
                feed_chunk_iter = pd.read_csv(feed_file, chunksize=1000, encoding="ISO-8859-1")
                for feed_chunk in feed_chunk_iter:
                    # Clean the second column in the feed file and set it as the key
                    feed_chunk[feed_chunk.columns[1]] = feed_chunk[feed_chunk.columns[1]].astype(str).str.strip().str.lower()
                    
                    # Perform the merge using the second column of the feed file and col_9 of the PSV file
                    merged_chunk = feed_chunk.merge(psv_data, left_on=feed_chunk.columns[1], right_on="col_9", how="left")
                    merged_data.append(merged_chunk)
            
            # Concatenate all chunks into a single DataFrame
            final_data = pd.concat(merged_data, ignore_index=True)
            
            # Save the merged data to a file with user-selected location and filename
            output_file = filedialog.asksaveasfilename(defaultextension=".csv", filetypes=[("CSV Files", "*.csv")])
            if output_file:
                final_data.to_csv(output_file, index=False)
                self.update_label(f"Files merged and saved to {output_file}")
            else:
                self.update_label("Merge operation canceled.")
        except Exception as e:
            messagebox.showerror("Error", f"An error occurred: {str(e)}")

# Run the Tkinter application
if __name__ == "__main__":
    root = tk.Tk()
    app = DataMergerApp(root)
    root.mainloop()
