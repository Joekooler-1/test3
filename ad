import tkinter as tk
from tkinter import filedialog, messagebox
import pandas as pd
import numpy as np
import os
import gc  # Import garbage collection module for explicit memory management

def load_cdr_file(cdr_file_path):
    # Load only the needed columns with specific names for clarity
    usecols = ['J', 'Z', 'Y', 'V', 'F', 'A', 'C']
    column_names = ['J', 'Name', 'LEI', 'Entity', 'Entity_ID', 'CDRID', 'Fund']
    cdr_df = pd.read_csv(cdr_file_path, sep='|', encoding='ISO-8859-1', header=None, usecols=usecols)
    cdr_df.columns = column_names
    cdr_df.set_index('J', inplace=True)  # Set 'J' (Short_name) as the index for quick lookups
    return cdr_df

def process_single_feed_file(feed_file, cdr_df, output_file, close_value):
    # Set a smaller chunk size to reduce memory usage
    chunk_size = 2000  # Adjust to an appropriate size for your system's memory
    first_chunk = True

    for feed_chunk in pd.read_csv(feed_file, header=None, encoding='ISO-8859-1', chunksize=chunk_size):
        feed_columns = generate_column_names(feed_chunk.shape[1])
        feed_chunk.columns = feed_columns
        feed_chunk.set_index('B', inplace=True)  # Assuming 'B' is the key for merging

        # Merge chunk with CDR data
        merged_df = feed_chunk.join(cdr_df, how='left', rsuffix='_cdr')

        # Convert necessary columns to reduce memory
        numeric_cols = ['M', 'Y', 'Z', 'AE']
        merged_df[numeric_cols] = merged_df[numeric_cols].apply(pd.to_numeric, errors='coerce', downcast='float')

        # Convert large, repeated text columns to categorical to save memory
        merged_df['Product'] = 'Equity Derivatives'  # Assuming this is constant
        merged_df['Product'] = merged_df['Product'].astype('category')
        merged_df['EQD_SEC_FLAG'] = merged_df['AM'] == 'Y'
        merged_df['EQD_SEC_FLAG'] = merged_df['EQD_SEC_FLAG'].astype('category')
        
        # Use numpy for vectorized calculations
        merged_df['Units'] = -np.asarray(merged_df['M'], dtype=np.float32)
        merged_df['MTM (Local CCY)'] = (
            np.asarray(merged_df['Y'], dtype=np.float32) * 
            np.asarray(merged_df['Z'], dtype=np.float32) * 
            np.asarray(merged_df['AE'], dtype=np.float32)
        )
        merged_df['Close'] = close_value

        # Collect output columns
        output_df = merged_df.assign(
            Sent_Status="",
            Sent="",
            Error=np.where(merged_df['CDRID'].isna(), "Error", ""),
            Product=merged_df['Product'],
            Name=merged_df['Name'],
            LEI=merged_df['LEI'],
            AppandShortName="GLOBALBOOK|" + merged_df.index.astype(str),
            CDR_Application="GLOBALBOOK",
            Short_name=merged_df.index,
            Entity=np.where(merged_df['Entity'].notna(), merged_df['Entity'], merged_df['C']),
            Entity_ID=merged_df['Entity_ID'],
            CDRID=merged_df['CDRID'],
            EQD_Client=merged_df['C'],
            Trade_ID=merged_df['F'],
            RBC_ID="",
            RBC_Name="",
            RBC_shortname="",
            Fund=merged_df['Fund'],
            Trade_date=merged_df['O'],
            Maturity_Date=merged_df['P'],
            Sub_Product=merged_df['H'],
            EQD_DF_FLAG="",
            EQD_SEC_FLAG=merged_df['EQD_SEC_FLAG'],
            Underlying="",
            Units=merged_df['Units'],
            Contract_size=merged_df['Z'],
            Call_put=merged_df['J'],
            CCY=merged_df['K'],
            Long_Short=merged_df['L'],
            Adjustment="",
            Unit_Price_Local_CCY=merged_df['AJ'],
            COB="",
            Close=merged_df['Close'],
            MTM_Local_CCY=merged_df['MTM (Local CCY)'],
            MTM_USD="",
            Strategy=merged_df['U'],
            Load_Type=""
        )

        # Append processed chunk to output CSV file incrementally
        output_df.to_csv(output_file, mode='a', index=False, header=first_chunk)
        first_chunk = False  # After the first write, subsequent chunks will not write the header

        # Explicitly delete processed data and run garbage collection
        del feed_chunk, merged_df, output_df
        gc.collect()

# The rest of the code remains unchanged, and `process_files` in the `DataProcessorApp` class 
# will use this optimized `load_cdr_file` function to load only the necessary columns.
